package com.example.vulnscanner;

import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.os.Build;
import android.system.Os;
import android.system.StructStat;
import java.io.File;
import java.util.ArrayList;
import java.util.List;

public class AndroidVulnerabilityScanner {

    private final Context context;
    private final PackageManager packageManager;
    private final List<VulnerabilityCheck> checks;

    public AndroidVulnerabilityScanner(Context context) {
        this.context = context;
        this.packageManager = context.getPackageManager();
        this.checks = new ArrayList<>();

        // Register all checks
        register_checks();
    }

    private interface VulnerabilityCheck {
        void run();
    }

    private void register_checks() {
        checks.add(this::check_root_access);
        checks.add(this::check_debuggable_apps);
        checks.add(this::check_world_writable_files);
        checks.add(this::check_dangerous_permissions);
        checks.add(this::check_outdated_components);
        // Add new checks here
    }

    public void run_scan() {
        System.out.println("=== Android Security Scanner ===");
        for (VulnerabilityCheck check : checks) {
            check.run();
        }
        System.out.println("\n[+] Scan completed");
    }

    private void check_root_access() {
        System.out.println("\n[*] Checking for root access...");

        boolean is_rooted = check_su_exists() || check_superuser_apk() || check_root_apps();
        System.out.println("[!] Root access detected: " + is_rooted);
    }

    private boolean check_su_exists() {
        String[] paths = {
            "/system/bin/su", "/system/xbin/su", "/sbin/su",
            "/system/su", "/system/bin/.ext/su", "/system/usr/we-need-root/su"
        };

        for (String path : paths) {
            if (new File(path).exists()) {
                System.out.println("[!] SU binary found at: " + path);
                return true;
            }
        }
        return false;
    }

    // ... (other check methods remain the same as previous implementation)
    // Remember to maintain snake_case for new methods

    public static void usage() {
        System.out.println("Android Vulnerability Scanner Usage:");
        System.out.println("1. Instantiate the scanner with application context:");
        System.out.println("   AndroidVulnerabilityScanner scanner = new AndroidVulnerabilityScanner(getApplicationContext());");
        System.out.println("2. Run the scan:");
        System.out.println("   scanner.run_scan();");
        System.out.println("\nOptional:");
        System.out.println("- Add custom checks by implementing VulnerabilityCheck interface");
        System.out.println("- Register new checks in register_checks() method");
    }
}